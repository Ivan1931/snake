import java.io.IOException;
import java.util.Map;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jonah-hooper' at '2014/07/29 3:56 PM' with Gradle 2.0
 *
 * @author jonah-hooper, @date 2014/07/29 3:56 PM
 */
public class Program {
    public static void main(String[] args) throws IOException {
        Reader reader = new Reader();
        String initial = reader.readInitialState();
        GameController controller = new GameController(new Basilisk());
        GameState nextState;
        Direction nextMove;
        String[] currentStateRepresentation = reader.readNextGameState();
        String[] previousStateRepresentation = null;
        double previousLength = Double.MAX_VALUE;
        double currentLength = 0.0;

        long timeA = 0;
        long timeB = 0;
        long previousA = 0;
        long previousB = 0;

        boolean wasTrapped = false;
        final int counterInterval = 1000;
        int games = 0;

        while (currentStateRepresentation != null){
            timeA = System.currentTimeMillis();
            games++;
            nextState = new GameState(currentStateRepresentation, null);
            controller.update(nextState);
            currentLength = nextState.getOurSnake().getLength();

            // Log what our dead snake looked like
            if(currentLength < previousLength) {
                Logger.log(previousStateRepresentation);
                Logger.log("*");
                Logger.log("Decision Time: " + (previousB - previousA));
                Logger.log("*");
            }
            //log us being trapped
            /*if (nextState.getOurSnake().isTrapped(nextState.getBoard())) {
                if (!wasTrapped) {
                    wasTrapped = true;
                    Logger.log(previousStateRepresentation);
                    Logger.log("*");
                }
            } else {
                wasTrapped = false;
            }*/

            try {
                nextMove = controller.move();
            } catch (Exception e) {
                Logger.log("We had an exception and thus continued straight");
                Logger.log(e.getMessage());
                nextMove = nextState.getOurSnake().currentDirection();
            }
            timeB = System.currentTimeMillis();

            System.out.println(Direction.asInt(nextMove));
            previousLength = currentLength;
            previousStateRepresentation = currentStateRepresentation;
            currentStateRepresentation = reader.readNextGameState();
            previousA = timeA;
            previousB = timeB;

            /*if (games % counterInterval == 0) {
                Logger.log("*******");
                for (Map.Entry<String, Double> kv : controller.gameStats().entrySet()) {
                    Logger.log(kv.getKey() + ":" + kv.getValue());
                }
                Logger.log("*******");
            }*/

        }
        reader.close();
    }

}
