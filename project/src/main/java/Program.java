import java.io.IOException;
import java.util.Map;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jonah-hooper' at '2014/07/29 3:56 PM' with Gradle 2.0
 *
 * @author jonah-hooper, @date 2014/07/29 3:56 PM
 */
public class Program {

    private static void printNonDeathSquares(GameState state) {
        Point head = state.getOurSnake().getHead();
        Board board = state.getBoard();
        for(Direction direction : Direction.values()) {
            Point point = head.pointInDirection(direction);
            if(Board.isOnBoard(point) && board.isTraversable(point)) {
                System.out.println(direction.toString());
            }
        }
    }

    public static void main(String[] args) throws IOException {
        Reader reader = new Reader();
        String initial = reader.readInitialState();
        GameController controller = new GameController(new Basilisk());
        String[] currentStateRepresentation = reader.readNextGameState();
        String[] previousStateRepresentation = null;
        double previousLength = Double.MAX_VALUE;
        double currentLength = 0.0;

        boolean wasTrapped = false;
        final int counterInterval = 3000;
        int games = 0;

        while (currentStateRepresentation != null){
            games++;
            GameState nextState = new GameState(currentStateRepresentation, null);
            controller.update(nextState);
            Direction nextMove;
            currentLength = nextState.getOurSnake().getLength();

            // Log what our dead snake looked like
            if(currentLength < previousLength) {
                Logger.log(previousStateRepresentation);
                Logger.log("*");
            }
            //log us being trapped
            /*if (nextState.getOurSnake().isTrapped(nextState.getBoard())) {
                if (!wasTrapped) {
                    wasTrapped = true;
                    Logger.log(previousStateRepresentation);
                    Logger.log("*");
                }
            } else {
                wasTrapped = false;
            }*/

            //This here line prints to standard out all of the moves which we cannot do. This is so that if the decisions take to long, we will at least
            //move into a traversable square
            printNonDeathSquares(nextState);
            try {
                nextMove = controller.move();
            } catch (Exception e) {
                Logger.log("We fucked up");
                Logger.log(e.getMessage());
                nextMove = nextState.getOurSnake().currentDirection();
            }

            System.out.println(Direction.asInt(nextMove));
            previousLength = currentLength;
            previousStateRepresentation = currentStateRepresentation;
            currentStateRepresentation = reader.readNextGameState();

            if (games % counterInterval == 0) {
                Logger.log("*******");
                for (Map.Entry<String, Double> kv : controller.gameStats().entrySet()) {
                    Logger.log(kv.getKey() + ":" + kv.getValue());
                }
                Logger.log("*******");
            }

        }
        reader.close();
    }

}
